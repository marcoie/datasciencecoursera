demo()
install.packages("KernSmooth")
install.packages("KernSmoothIRT")
install.packages("KernSmooth")
library(KernSmooth)
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time
)
select(cran,-X:size)
select(cran,-X:-size)
-5:20
-(5:20)
select(cran,-(X:-size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
View(by_package)
View(cran)
by_package
summarize(cran, avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failes")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
View(sat)
sat
?select
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_oment <- now()
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 23, minutes = 16, seconds = 55)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 00)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrival)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
R.version
library(dplyr)
install.packages("RMySQL")
setwd("~/Projects/dscoursera")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
source('~/Projects/dscoursera/AccessData2.R')
result
install.packages(c("htmlwidgets", "Rcpp"))
source('~/Projects/dscoursera/AccessData2.R')
allTables[1:5]
source('~/Projects/dscoursera/AccessData2.R', echo=TRUE)
dbListFields(hg19,"affyU133Plus2")
dbGetQuery(hg19,"select count(*) from afflyU133Plus2")
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19,"affyU133Plus2")
warnings()
head(affyData)
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(hg19,"select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query);quantile(affyMis$misMatches)
affyMisMall <- fetch(query, n=10);dbClearResult(query);
dim(affyMisMall)
dbDisconnect(hg19)
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.5","foo")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
A
h5write(A,"example.h5","foo/A")
A = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
A = matrix(1:10,nr=5,nc=2)
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out = 5),c("ab","cde","fghi","a","s"),stringsAsFactors = FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
con = url("http://scholar. google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readlines(con)
htmlCode <- readLines(con)
htmlCode = readLines(con)
con = url("http://scholar. google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
con = url("http://scholar. google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes = TRUE)
xpathSApply(html,"//title",xmlValue)
html
library(httr)
htnl2 = GET(url)
content2 = content(html2,as="text")
content2 = content(htnl2,as="text")
parsedHtnl = htmlParse(content2,asText = TRUE)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHtnl,"//title",xmlValue)
parsedHtnl
pg2 = GET("http://tttpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
names(pg2)
install.packages("twitteR")
myapp = oauth_app("twitter",key = "aA4P8BlY9ljDduLXxDdMHgq9H", secret="CIMLnqrOoKNut1dAEOXtYDaDCK7o8K030nETB3A8ApHpEpWO9s")
sig = sign_oauth1.0(myapp, token = "15793221-y0ow9sfpms7pYNFw8TNb2CZeFyB1GJwz0MsJaSw6e", token_secret = "HOmsiLT311LBsOhHmWH7eFR1kaZf7HS73YX1jDb5o0MZm")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json", sig)
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
library("jsonlite", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2[2,1:4]
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "63e044fea9aef579455e",
secret = "7a19ac4affda99ccecb5e8f08d9531dcfaa9296e")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("MarcoDSApp",
key = "63e044fea9aef579455e",
secret = "7a19ac4affda99ccecb5e8f08d9531dcfaa9296e")
github_token <- oauth2.0_token(oauth_endpoints("MarcoDSApp"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
jsonlite::toJSON(req)
json1 <- content(req)
names(json1)
json2 <- jsonlite::fromJSON(toJSON(json1))
json2
View(json2)
View(json2)
View(json2)
head(json2)
names(json2)
json2[1]
json2[2]
json2[json2$name="datasharing"]
json2[json2[2]$name="datasharing"]
json2[11]
json2[11,]
names(jason2)
names(json2)
json2[11,46]
json2[,"name"]
json2[11,"created_at"]
install.packages("sqldf")
json2$name
class(json2)
data <- read.csv("ss06pid.csv")
View(data)
?rm
rm(data)
acs <- read.csv("ss06pid.csv")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
library(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
require(sqldf)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
detach("package:RMySQL", unload=TRUE)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select distinct AGEP from acs")
?readLines
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
?nchar
htmlcode <- readLines(con,n= 1)
htmlcode <- readLines(con,n= 10)
htmlcode
length(htmlcode)
htmlcode[10]
nchar(htmlcode[10])
htmlcode <- readLines(con,n= 100)
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
filename <- "getdata-wksst8110.for"
?readLines
?read.table
datosleidos <- read.fwf(filename,c(11L,9L,4L,9L,4L,9L,4L,9L,4L),skip = 5,n=1436,col.names =("date","M2","M3","M4","M5","M6","M7","M8","M9"))
datosleidos <- read.fwf(filename,c(11L,9L,4L,9L,4L,9L,4L,9L,4L),skip = 5,n=1436,col.names = c("date","M2","M3","M4","M5","M6","M7","M8","M9"))
View(datosleidos)
datosleidos <- read.fwf(filename,c(11L,8L,5L,8L,5L,8L,5L,8L,5L),skip = 5,n=1436,col.names =("date","M2","M3","M4","M5","M6","M7","M8","M9"))
datosleidos <- read.fwf(filename,c(11L,8L,5L,8L,5L,8L,5L,8L,5L),skip = 5,n=1436,col.names = c("date","M2","M3","M4","M5","M6","M7","M8","M9"))
View(datosleidos)
class(datosleidos)
class(datosleidos[,4])
length(datosleidos)
datosleidos <- read.fwf(filename,c(11L,8L,5L,8L,5L,8L,5L,8L,5L),skip = 4,n=1436,col.names = c("date","M2","M3","M4","M5","M6","M7","M8","M9"))
View(datosleidos)
datosleidos <- read.fwf(filename,c(11L,8L,5L,8L,5L,8L,5L,8L,5L),skip = 4,col.names = c("date","M2","M3","M4","M5","M6","M7","M8","M9"))
View(datosleidos)
datosleidos2 <- read.fwf("wksst8110.webarchive",c(11L,8L,5L,8L,5L,8L,5L,8L,5L),skip = 4,col.names = c("date","M2","M3","M4","M5","M6","M7","M8","M9"))
datosleidos <- read.fwf(filename,c(11L,8L,5L,8L,5L,8L,5L,8L,5L),skip = 4,col.names = c("date","M2","M3","M4","M5","M6","M7","M8","M9"))
?sum()
sum(datosleidos$M4)
?oauth_app
oauth_endpoints("twitter")
json2
json2[11]
json2[,11]
?dimensions
?dim
dim(json2)
names(json2)
json2[,"name"=""]
json2[11]
json2[,11]
json2[,2]
json2[,"name"="datasharing"]
json2[json2$name="datasharing",]
json2[json2$name ="datasharing",]
json2[json2$name == "datasharing",]
json2[json2$name == "datasharing",]$created_at
?which
source('~/Projects/dscoursera/GettingData.R')
source('~/Projects/dscoursera/GettingData.R')
source('~/Projects/dscoursera/GettingData.R')
View(restData)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm=T)
table(restData$zipCode %in% c("21212"))
colSums(is.na(restData))
source('~/Projects/dscoursera/GettingData.R')
restData[restData$zipCode %in% c("21212"),]
?ftable
?xtabs
?seq
seq(1,10,by=2)
?cut
restData$zipGroups = cut(restData$zipCode,breaks=quantile(restData$zipCode))
source('~/Projects/dscoursera/GettingData.R')
