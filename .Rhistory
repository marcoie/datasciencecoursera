demo()
install.packages("KernSmooth")
install.packages("KernSmoothIRT")
install.packages("KernSmooth")
library(KernSmooth)
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran,-time
)
select(cran,-X:size)
select(cran,-X:-size)
-5:20
-(5:20)
select(cran,-(X:-size))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
View(by_package)
View(cran)
by_package
summarize(cran, avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
view(top_counts)
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread()
?spread
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failes")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
View(sat)
sat
?select
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_oment <- now()
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 23, minutes = 16, seconds = 55)
this_moment
?now
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 00)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrival)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
R.version
library(dplyr)
setwd("~/Projects/dscoursera")
DataTable <- read.table("getdata-data-ss06hid.csv")
DataTable
View(DataTable)
DataTable <- read.csv("getdata-data-ss06hid.csv")
library(plyr)
library(plyr)
swirl()
library(swirl)
swirl()
library(dplyr)
?dplyr
?`dplyr-package`
DataTable %>% summarize(count = n())
DataTable %>% summarize(count = n()) %>% filter(VAL = 24)
DataTable %>% summarize(count = n()) %>% filter(VAL == 24)
DataTable$VAL
DataTable %>% filter(VAL == 24)
DataTable %>% filter(VAL == 24) %>% summarize(count = n())
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("openxlsx")
library(openxlsx)
datos <- read.xlsx("DATA.gov_NGAP.xlsx")
View(datos)
?read.xlsx
datos <- read.xlsx("DATA.gov_NGAP.xlsx", rows = 18:23, cols = 7:15)
dat <- read.xlsx("DATA.gov_NGAP.xlsx", rows = 18:23, cols = 7:15)
sum(datos$Zip*datos$Ext,na.rm=T)
library(xml)
library(XML)
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal=T)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternalNodes = T)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(rawToCHar(GET(fileurl)$content)
)
rawToChar(fileurl)
GET(fileurl)
GET(fileurl)$content
doc <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal=T)
doc
head(doc)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode
xmlSApply(rootNode, xmlValue)
rootNode[1]
rootNode[1][1]
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
zipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
zipcodes[zipcodes = "21231"]
zipcodes[zipcodes == "21231"]
length(zipcodes[zipcodes == "21231"])
?fread
install.packages("data.table")
library(data.table)
DT <- fread("ss06pid.csv")
View(DT)
DT$pwgtp15
DT[,mean(pwgtp15),by=SEX]
tables()
system.time(DT[,mean(pwgtp15),by=SEX])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT$SEX[1]
rowMeans(DT[DT$SEX==1]); rowMeans(DT[DT$SEX==2])
mean(DT$pwgtp15,by=DT$SEX)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
ly(split(DT$pwgtp15,DT$SEX),mean)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
DataTable %>% filter(VAL == 24)
DataTable %>% filter(VAL == 24) >%> summarize(count = n())
DataTable %>% filter(VAL == 24) >%> summarize(count = n())
DTA <- DataTable %>% filter(VAL == 24)
summarize(DTA, count = n())
sum(datos$Zip*datos$Ext,na.rm=T)
length(zipcodes)
length(zipcodes[zipcodes == "21231"])
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
path2csv
library(dplyr)
packageVersion("dply")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, .time)
select(cran, -time)
swirl()
swirl()
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
ilter(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", | country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
ilter(cran, country == "US" || country == "IN")
ilter(cran, country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os ="linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
carn3
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000 )
